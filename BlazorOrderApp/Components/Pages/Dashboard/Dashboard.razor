@page "/dashboard"
@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@using Radzen
@using Radzen.Blazor

<div class="mb-3">
    <label>集計期間：</label>
    <div class="btn-group" role="group" aria-label="集計期間">
        <RadzenButton ButtonStyle="ButtonStyle.Info"
                      Class="@(SelectedPeriod == "1w" ? "active" : "")"
                      Click="@(() => SelectedPeriod = "1w")">
            1週間
        </RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Info"
                      Class="@(SelectedPeriod == "1m" ? "active" : "")"
                      Click="@(() => SelectedPeriod = "1m")">
            1か月
        </RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Info"
                      Class="@(SelectedPeriod == "3m" ? "active" : "")"
                      Click="@(() => SelectedPeriod = "3m")">
            3か月
        </RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Info"
                      Class="@(SelectedPeriod == "6m" ? "active" : "")"
                      Click="@(() => SelectedPeriod = "6m")">
            6か月
        </RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Info"
                      Class="@(SelectedPeriod == "1y" ? "active" : "")"
                      Click="@(() => SelectedPeriod = "1y")">
            1年
        </RadzenButton>
    </div>
</div>

<h5 class="mt-4">受注金額推移</h5>
<div style="min-width:100%; min-height:320px; width:100%; background:rgba(0,0,0,0.01);">
    @if (GraphData != null)
    {
        <RadzenChart>
            <RadzenColumnSeries Data="@GraphData" CategoryProperty="受注日ラベル" Title="受注金額" LineType="LineType.Dashed" ValueProperty="受注金額">
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenColumnSeries>
            <RadzenValueAxis Formatter="@FormatAsJPY">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="金額 (円)" />
            </RadzenValueAxis>
        </RadzenChart>
    }
    else
    {
        <div style="height:320px;display:flex;align-items:center;justify-content:center;">
            <span>データ取得中...</span>
        </div>
    }
</div>

<h5 class="mt-4">得意先・商品 上位（受注金額ベース）</h5>
<div class="row">
    <div class="col-md-6 mb-3">
        <div style="min-width:100%; min-height:320px; width:100%; background:rgba(0,0,0,0.01);">
            @if (CustomerRanking != null)
            {
                <RadzenChart>
                    <RadzenPieSeries Data="@CustomerRanking" Title="受注金額" CategoryProperty="得意先名" ValueProperty="受注金額">
                        <RadzenSeriesDataLabels Visible="false" />
                    </RadzenPieSeries>
                    <RadzenLegend Position="LegendPosition.Right" />
                </RadzenChart>
            }
            else
            {
                <div style="height:320px;display:flex;align-items:center;justify-content:center;">
                    <span>データ取得中...</span>
                </div>
            }
        </div>
    </div>
    <div class="col-md-6 mb-3">
        <div style="min-width:100%; min-height:320px; width:100%; background:rgba(0,0,0,0.01);">
            @if (ProductRanking != null)
            {
                <RadzenChart>
                    <RadzenPieSeries Data="@ProductRanking" Title="受注金額" CategoryProperty="商品コード名称" ValueProperty="受注金額">
                        <RadzenSeriesDataLabels Visible="false" />
                    </RadzenPieSeries>
                    <RadzenLegend Position="LegendPosition.Right" />
                </RadzenChart>
            }
            else
            {
                <div style="height:320px;display:flex;align-items:center;justify-content:center;">
                    <span>データ取得中...</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    public IOrderAnalysisRepository OrderAnalysisRepo { get; set; } = default!;

    private string _selectedPeriod = "1w";
    private string SelectedPeriod
    {
        get => _selectedPeriod;
        set
        {
            if (_selectedPeriod != value)
            {
                _selectedPeriod = value;
                _ = LoadDataAsync();
            }
        }
    }

    private List<日別受注金額Model>? GraphData;
    private List<得意先別受注金額Model>? CustomerRanking;
    private List<商品別受注金額Model>? ProductRanking;

    private string FormatAsJPY(object value)
    {
        if (value is IConvertible convertible)
        {
            return $"{convertible.ToDecimal(System.Globalization.CultureInfo.InvariantCulture):#,##0} 円";
        }
        return value?.ToString() ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var endDate = DateTime.Today;
        var startDate = SelectedPeriod switch
        {
            "1w" => endDate.AddDays(-7),
            "1m" => endDate.AddMonths(-1),
            "3m" => endDate.AddMonths(-3),
            "6m" => endDate.AddMonths(-6),
            "1y" => endDate.AddYears(-1),
            _ => endDate.AddMonths(-1)
        };

        bool isWeekly = SelectedPeriod is "3m" or "6m" or "1y";
        if (isWeekly)
            GraphData = (await OrderAnalysisRepo.Get週別受注金額Async(startDate, endDate)).ToList();
        else
            GraphData = (await OrderAnalysisRepo.Get日別受注金額Async(startDate, endDate)).ToList();

        CustomerRanking = (await OrderAnalysisRepo.Get得意先別受注金額Async(startDate, endDate)).ToList();
        ProductRanking = (await OrderAnalysisRepo.Get商品別受注金額Async(startDate, endDate)).ToList();
    }
}