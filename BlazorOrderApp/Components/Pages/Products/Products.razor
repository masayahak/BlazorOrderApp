@page "/products"
@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@attribute [Authorize(Roles = "Administrator")]

<h3>商品マスタ一覧</h3>

<div class="mb-3 d-flex align-items-end">
    <div>
        <input type="text" class="form-control" placeholder="キーワード（商品コード／商品名）"
               @bind="keyword" @bind:event="oninput" style="width: 300px; display:inline-block;" />
    </div>
    <button class="btn btn-primary ms-2" @onclick="Search">検索</button>

    <button class="btn btn-success ms-auto" @onclick="OnAdd">＋追加</button>
</div>

<table class="table table-striped table-bordered table-sm">
    <thead class="custom-header">
        <tr>
            <th class="text-center" style="width:20%">商品コード</th>
            <th class="text-center" style="width:50%">商品名</th>
            <th class="text-center" style="width:15%">単価</th>
            <th class="text-center" style="width:15%">操作</th>
        </tr>
    </thead>
    <tbody>
        @if (!表示一覧.Any())
        {
            <tr><td colspan="4">該当する商品がありません。</td></tr>
        }
        else
        {
            <Virtualize Context="row" Items="@表示一覧" OverscanCount="5" SpacerElement="tr">
                <tr>
                    <td>@row.商品コード</td>
                    <td>@row.商品名</td>
                    <td class="text-end pe-3">¥@row.単価.ToString("#,##0")</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OnEdit(row.商品コード)">
                            修正・確認
                        </button>
                    </td>
                </tr>
            </Virtualize>
        }
    </tbody>
</table>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    public I商品Repository 商品Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string keyword { get; set; } = string.Empty;

    private List<商品Model>? 商品一覧;
    private List<商品Model> 表示一覧 = new();  // 絞り込みでフィルターされる

    protected override async Task OnInitializedAsync()
    {
        商品一覧 = (await 商品Repository.GetAllAsync()).ToList();
        // 初期表示
        Search();
    }

    private void Search()
    {
        // キーワードなし
        if (string.IsNullOrWhiteSpace(keyword))
        {
            表示一覧 = 商品一覧?.ToList() ?? new();
            return;
        }

        // キーワードあり
        var k = keyword.Trim();
        表示一覧 = 商品一覧?
            .Where(x => (x.商品コード?.Contains(k) ?? false)
                        || (x.商品名?.Contains(k) ?? false))
            .ToList() ?? new();
    }

    private void OnAdd()
    {
        var url = string.IsNullOrEmpty(keyword)
            ? "/products/edit/"
            : $"/products/edit/?keyword={Uri.EscapeDataString(keyword)}";
        Navigation.NavigateTo(url);
    }

    private void OnEdit(string 商品コード)
    {
        var url = string.IsNullOrEmpty(keyword)
            ? $"/products/edit/{商品コード}"
            : $"/products/edit/{商品コード}?keyword={Uri.EscapeDataString(keyword)}";
        Navigation.NavigateTo(url);
    }
}