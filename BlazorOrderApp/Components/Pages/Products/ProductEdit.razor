@page "/products/edit"
@page "/products/edit/{商品コード}"

@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@using Microsoft.Data.Sqlite;
@attribute [Authorize(Roles = "Administrator")]
@inherits BlazorOrderApp.Components.Commons.InitialFocusComponent

<h3>商品マスタ @((isEdit ? "修正" : "追加"))</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mb-2">@errorMessage</div>
}

@* Enterキーでフォーカス制御したいので、FormのOnSubmitは利用できない *@
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />

    <div class="row mb-2">
        <div class="mb-3 d-flex align-items-center">
            <label for="商品コード" class="form-label mb-0 me-2" style="width: 80px;">商品コード</label>
            @if (isEdit)
            {
                <InputText id="商品コード" 
                        @bind-Value="model.商品コード"
                        class="form-control readonly-field" style="width:160px;"
                        Disabled
                           data-tab="10" />
    }
            else
            {
                <InputText id="商品コード" required 
                        @bind-Value="model.商品コード"
                        class="form-control" style="width:160px;"
                        autocomplete="off"
                           data-tab="10" />
                <ValidationMessage For="() => model.商品コード" class="text-danger ms-2" />
            }
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="商品名" class="form-label mb-0 me-2" style="width: 80px;">商品名</label>
            <InputText id="商品名" required 
                       @bind-Value="model.商品名"
                       class="form-control" style="width:320px;"
                       autocomplete="off"
                       data-tab="20" />
            <ValidationMessage For="() => model.商品名" class="text-danger ms-2" />
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="単価" class="form-label mb-0 me-2" style="width: 80px;">単価</label>
            <InputText id="単価"
                       @bind-Value="単価入力値"
                       class="form-control text-end"
                       style="width:160px;"
                       autocomplete="off"
                       data-tab="30"
                       @oninput="OnUnitPriceInput" />
            <ValidationMessage For="() => model.単価" class="text-danger ms-2" />
        </div>

        <div class="mb-3 d-flex align-items-center">
            <label for="備考" class="form-label mb-0 me-2" style="width: 80px;">備考</label>
            <InputText id="備考" 
                       @bind-Value="model.備考"
                       class="form-control"
                       autocomplete="off"
                       data-tab="40" />
        </div>
    </div>

    <!-- ボタン行 -->
    <div class="mt-3 d-flex justify-content-between">
        @if (isEdit)
        {
            <button type="button" class="btn btn-danger px-5" @onclick="OnDeleteConfirm">削除</button>
        }
        else
        {
            <div style="width: 120px;"></div>
        }
        <div class="d-flex gap-3">
            <button type="button" class="btn btn-primary px-5" @onclick="OnSubmit">保存</button>
            <button type="button" class="btn btn-secondary px-5" @onclick="OnBack">戻る</button>
        </div>
    </div>
</EditForm>

@* ------------ 削除用確認ダイアログ ------------ *@
@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.2);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><strong>削除確認</strong></div>
                <div class="modal-body">本当に削除しますか？</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">キャンセル</button>
                    <button class="btn btn-danger" @onclick="OnDelete">削除</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    public IProductRepository 商品Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string? 商品コード { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? keyword { get; set; }

    private ProductModel model = new();
    private EditContext editContext = default!;

    private bool isEdit => !string.IsNullOrEmpty(商品コード);
    private bool showDeleteConfirm = false;

    private string 単価入力値 = "";
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        if (isEdit)
        {
            // 編集時：既存データ取得
            var item = await 商品Repository.GetByCodeAsync(商品コード!);
            if (item != null)
                model = item;
        }
        else
        {
            // 追加時：初期化
            model = new ProductModel();
        }

        // OnSubmitで自前でValidationするために必要
        editContext = new EditContext(model);
        messageStore = new ValidationMessageStore(editContext);

        // 初期表示用
        単価入力値 = model.単価?.ToString() ?? "";
    }

    // 単価入力時の正の整数かつIntキャストチェック追加
    private void OnUnitPriceInput(ChangeEventArgs e)
    {
        単価入力値 = e.Value?.ToString() ?? "";
        messageStore!.Clear(editContext.Field(nameof(model.単価)));

        // 小数点・記号・英字チェック
        if (単価入力値.Any(c => !char.IsDigit(c)))
        {
            messageStore.Add(editContext.Field(nameof(model.単価)), "単価は正の整数のみ入力できます。");
            editContext.NotifyValidationStateChanged();
            return;
        }

        // 数値変換
        if (int.TryParse(単価入力値, out var value))
        {
            model.単価 = value;
        }
        else
        {
            messageStore.Add(editContext.Field(nameof(model.単価)), "単価が不正です。");
        }

        editContext.NotifyValidationStateChanged();
    }


    private string? errorMessage = null;
    private async Task OnSubmit()
    {
        // OnSubmitで自前でValidation
        // （FormのOnSubumitはエンターキーでフォーカス制御しているので使えない）
        if (!editContext.Validate()) return;

        errorMessage = null;
        try
        {
            if (!isEdit)
            {
                await 商品Repository.AddAsync(model);
            }
            else
            {
                await 商品Repository.UpdateAsync(model);
            }
            OnBack();
        }
        catch (SqliteException ex)
        {
            if (ex.SqliteErrorCode == 19) // 一意制約違反（UNIQUE constraint failed）
            {
                errorMessage = "同じ商品コードが既に登録されています。";
            }
            else
            {
                throw ex;
            }
        }
    }

    private void OnBack()
    {
        var url = string.IsNullOrEmpty(keyword)
            ? "/products"
            : $"/products?keyword={Uri.EscapeDataString(keyword)}";
        Navigation.NavigateTo(url);
    }

    private void OnDeleteConfirm()
    {
        showDeleteConfirm = true;
    }

    private async Task OnDelete()
    {
        await 商品Repository.DeleteAsync(model);
        showDeleteConfirm = false;
        OnBack();
    }
}
