@page "/products/edit"
@page "/products/edit/{商品コード}"


@using Microsoft.Data.SqlClient
@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize(Roles = "Administrator")]

<h3>商品マスタ @((isEdit ? "修正" : "追加"))</h3>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mb-2">@errorMessage</div>
}
<EditForm Model="model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="row mb-2">
        <div class="mb-3 d-flex align-items-center">
            <label for="商品コード" class="form-label mb-0 me-2" style="width: 80px;">商品コード</label>
            @if (isEdit)
            {
                <InputText id="商品コード" class="form-control readonly-field" style="width:160px;" @bind-Value="model.商品コード" Disabled />
            }
            else
            {
                <InputText id="商品コード" class="form-control" style="width:160px;" @bind-Value="model.商品コード" autocomplete="off" />
                <ValidationMessage For="() => model.商品コード" />
            }
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="商品名" class="form-label mb-0 me-2" style="width: 80px;">商品名</label>
            <InputText id="商品名" class="form-control" style="width:320px;" @bind-Value="model.商品名" autocomplete="off" />
            <ValidationMessage For="() => model.商品名" class="text-danger" />
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="単価" class="form-label mb-0 me-2" style="width: 80px;">単価</label>
            <InputNumber id="単価" class="form-control text-end" style="width:160px;" @bind-Value="model.単価" step="1" min="0" autocomplete="off" />
            <ValidationMessage For="() => model.単価" class="text-danger" />
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="備考" class="form-label mb-0 me-2" style="width: 80px;">備考</label>
            <InputText id="備考" class="form-control" @bind-Value="model.備考" autocomplete="off" />
        </div>
    </div>

    <!-- ボタン行 -->
    <div class="mt-3 d-flex justify-content-between">
        @if (isEdit)
        {
            <button type="button" class="btn btn-danger px-5" @onclick="OnDeleteConfirm">削除</button>
        }
        else
        {
            <div style="width: 120px;"></div>
        }
        <div class="d-flex gap-3">
            <button type="submit" class="btn btn-primary px-5">保存</button>
            <button type="button" class="btn btn-secondary px-5" @onclick="OnBack">戻る</button>
        </div>
    </div>
</EditForm>

@* ------------ 削除用確認ダイアログ ------------ *@
@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.2);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><strong>削除確認</strong></div>
                <div class="modal-body">本当に削除しますか？</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">キャンセル</button>
                    <button class="btn btn-danger" @onclick="OnDelete">削除</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    public I商品Repository 商品Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string? 商品コード { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? keyword { get; set; }

    private 商品Model model = new();
    private bool isEdit => !string.IsNullOrEmpty(商品コード);

    private bool showDeleteConfirm = false;

    protected override async Task OnInitializedAsync()
    {
        if (isEdit)
        {
            // 編集時：既存データ取得
            var item = await 商品Repository.GetByCodeAsync(商品コード!);
            if (item != null)
                model = item;
        }
        else
        {
            // 追加時：初期化
            model = new 商品Model();
        }
    }

    private string? errorMessage = null;
    private async Task OnSubmit()
    {
        errorMessage = null;
        try
        {
            if (!isEdit)
            {
                await 商品Repository.AddAsync(model);
            }
            else
            {
                await 商品Repository.UpdateAsync(model);
            }
            OnBack();
        }
        catch (SqlException ex) // Dapper+SQLServerの場合
        {
            if (ex.Number == 2627 /*一意制約違反*/ || ex.Number == 2601)
            {
                errorMessage = "同じ商品コードが既に登録されています。";
            }
            else
            {
                throw ex;
            }
        }
    }

    private void OnBack()
    {
        var url = string.IsNullOrEmpty(keyword)
            ? "/products"
            : $"/products?keyword={Uri.EscapeDataString(keyword)}";
        Navigation.NavigateTo(url);
    }

    private void OnDeleteConfirm()
    {
        showDeleteConfirm = true;
    }

    private async Task OnDelete()
    {
        await 商品Repository.DeleteAsync(model.商品コード);
        showDeleteConfirm = false;
        OnBack();
    }
}
