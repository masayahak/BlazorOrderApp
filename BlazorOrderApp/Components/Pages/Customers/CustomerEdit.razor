@page "/customers/edit"
@page "/customers/edit/{得意先ID:int}"

@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@inherits BlazorOrderApp.Components.Commons.FocusNavigableComponent
@attribute [Authorize(Roles = "Administrator")]

<h3>得意先マスタ @((isEdit ? "修正" : "追加"))</h3>


<EditForm Model="model">
    <DataAnnotationsValidator />

    <div class="row mb-2">
        <div class="mb-3 d-flex align-items-center">
            <label for="得意先名" class="form-label mb-0 me-2" style="width: 80px;">得意先名</label>
            <InputText id="得意先名" required
                       @bind-Value="model.得意先名"
                       class="form-control" style="width:320px;"
                       autocomplete="off" 
                       data-tab="10" @onkeydown="@(e => HandleKeyDown(e, 10))" />
            <ValidationMessage For="() => model.得意先名" class="text-danger" />
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="電話番号" class="form-label mb-0 me-2" style="width: 80px;">電話番号</label>
            <InputText id="電話番号" required
                       @bind-Value="model.電話番号"
                       class="form-control" style="width:320px;"
                       autocomplete="off" 
                       data-tab="20" @onkeydown="@(e => HandleKeyDown(e, 20))" />
            <ValidationMessage For="() => model.電話番号" class="text-danger" />
        </div>
        <div class="mb-3 d-flex align-items-center">
            <label for="備考" class="form-label mb-0 me-2" style="width: 80px;">備考</label>
            <InputText id="備考"
                       @bind-Value="model.備考"
                       class="form-control"
                       autocomplete="off" 
                       data-tab="30" @onkeydown="@(e => HandleKeyDown(e, 30))" />
        </div>
    </div>

    <!-- ボタン行 -->
    <div class="mt-3 d-flex justify-content-between">
        @if (isEdit)
        {
            <button type="button" class="btn btn-danger px-5" @onclick="OnDeleteConfirm">削除</button>
        }
        else
        {
            <div style="width: 120px;"></div>
        }
        <div class="d-flex gap-3">
            <button type="button" class="btn btn-primary px-5" @onclick="OnSubmit">保存</button>
            <button type="button" class="btn btn-secondary px-5" @onclick="OnBack">戻る</button>
        </div>
    </div>
</EditForm>

@* ------------ 削除用確認ダイアログ ------------ *@
@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.2);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><strong>削除確認</strong></div>
                <div class="modal-body">本当に削除しますか？</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">キャンセル</button>
                    <button class="btn btn-danger" @onclick="OnDelete">削除</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    public ICustomerRepository 得意先Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int? 得意先ID { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? keyword { get; set; }

    private CustomerModel model = new();
    private bool isEdit => !(得意先ID == null);

    private bool showDeleteConfirm = false;

    protected override async Task OnInitializedAsync()
    {
        if (isEdit)
        {
            // 編集時：既存データ取得
            var item = await 得意先Repository.GetByIdAsync(得意先ID);
            if (item != null)
                model = item;
        }
        else
        {
            // 追加時：初期化
            model = new CustomerModel();
        }
    }

    private async Task OnSubmit()
    {
        if (isEdit)
        {
            await 得意先Repository.UpdateAsync(model);
        }
        else
        {
            await 得意先Repository.AddAsync(model);
        }
        OnBack();
    }

    private void OnBack()
    {
        var url = string.IsNullOrEmpty(keyword)
            ? "/customers"
            : $"/customers?keyword={Uri.EscapeDataString(keyword)}";
        Navigation.NavigateTo(url);
    }

    private void OnDeleteConfirm()
    {
        showDeleteConfirm = true;
    }

    private async Task OnDelete()
    {
        await 得意先Repository.DeleteAsync(model);
        showDeleteConfirm = false;
        OnBack();
    }
}
