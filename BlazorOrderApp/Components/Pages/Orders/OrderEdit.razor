@page "/orders/edit/"
@page "/orders/edit/{受注ID:int?}"

@using BlazorOrderApp.Components.Commons 
@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@using static BlazorOrderApp.Components.Commons.SuggestTextBox
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

<h3>受注 @((IsEdit ? "修正" : "追加"))</h3>

@if (受注Model is null)
{
    <div>データ取得中...</div>
}
else
{
    <EditForm Model="受注Model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input type="hidden" value="@IsEdit" />
        <input type="hidden" value="@受注Model.受注ID" />

        @* -------------- 受注の基本情報入力 -------------- *@
        <div class="row mb-2">
            <div class="col-md-2">
                <label for="受注日" class="form-label">受注日</label>
                <InputDate id="受注日" @bind-Value="受注Model.受注日" class="form-control" />
            </div>
            <div class="col-md-4 position-relative">
                <label for="得意先名" class="form-label">得意先名</label>
                <SuggestTextBox
                    Id="得意先名"
                    Value="@受注Model.得意先名"
                    OnValueChanged="val => {
                        受注Model.得意先名 = val;
                        if (string.IsNullOrEmpty(val)) 受注Model.得意先ID = 0;
                    }"
                    StartSearchChars=2
                    FetchSuggestions="Fetch得意先サジェスト"
                    OnSelect="On得意先Select"
                    DisplayValueSelector="@(item => item.Name)" />
                <input type="hidden" value="@受注Model.得意先ID" />
            </div>
            <div class="mb-2 col-md-2">
                <label for="合計金額" class="form-label text-center w-100">合計金額</label>
                <input id="合計金額" type="text" class="form-control text-end bg-light border readonly-field"
                       value="@受注Model.合計金額.ToString("¥#,##0")" readonly />
            </div>
        </div>

        @* -------------- 受注明細の入力 -------------- *@
        <hr class="my-4" />
        <div class="d-flex align-items-center mb-2">
            <h5 class="fw-bold text-primary mb-0 me-3">▶ 明細一覧</h5>
            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="On明細追加">＋明細を追加</button>
        </div>
        <hr class="my-2" />
        <table class="table table-sm">
            <thead class="custom-header">
                <tr>
                    <th style="width:20%">商品コード</th>
                    <th style="width:45%">商品名</th>
                    <th class="text-center" style="width:12%">単価</th>
                    <th class="text-center" style="width:12%">数量</th>
                    <th class="text-center" style="width:10%">操作</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < 受注Model.明細一覧.Count; i++)
                {
                    var m = 受注Model.明細一覧[i];
                    <tr>
                        <td>
                            <SuggestTextBox InputClass="form-control"
                                            Placeholder="(商品コード/名で検索)"
                                            Value="@m.商品コード"
                                            OnValueChanged="val => m.商品コード = val"
                                            StartSearchChars="2"
                                            FetchSuggestions="Fetch商品サジェスト"
                                            OnSelect="@(item => On商品Select(item, m))"
                                            DisplayValueSelector="@(item => item.Code)" 
                                            />
                        </td>
                        <td>
                            <input type="text" value="@m.商品名" class="form-control bg-light readonly-field" readonly />
                        </td>
                        <td>
                            <input type="text" class="form-control text-end bg-light readonly-field"
                                   value="@(m.単価 > 0 ? $"¥{m.単価:#,##0}" : "")" readonly />
                        </td>
                        <td>
                            <input type="number"
                                   value="@m.数量"
                                   @onchange="e => On数量変更(m, e.Value)"
                                   class="form-control text-end" min="0" autocomplete="off" />
                        </td>
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => On明細削除(m)">削除</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="mb-2">
            <label class="form-label">備考</label>
            <InputTextArea @bind-Value="受注Model.備考" class="form-control" />
        </div>

        <div class="mt-3 d-flex justify-content-between">
            @if (IsEdit)
            {
                <button type="button" class="btn btn-danger px-5" @onclick="ShowDeleteConfirm">削除</button>
            }
            else
            {
                <div style="width: 120px;"></div>
            }
            <div class="d-flex gap-3">
                <button type="submit" class="btn btn-primary px-5">保存</button>
                <button type="button" class="btn btn-secondary px-5" @onclick="OnCancel">戻る</button>
            </div>
        </div>
    </EditForm>
}

@* ------------ 削除用確認ダイアログ ------------ *@
@if (showDeleteConfirm)
{
    <div class="border rounded shadow p-4 bg-white position-fixed" style="top:30%; left:50%; transform:translate(-50%, -30%); z-index:1050;">
        <p class="mb-4">本当に削除しますか？</p>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirm">キャンセル</button>
            <button type="button" class="btn btn-danger" @onclick="OnDelete">削除</button>
        </div>
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    public I受注Repository 受注Repository { get; set; } = default!;
    [Inject]
    public I得意先Repository 得意先Repository { get; set; } = default!;
    [Inject]
    public I商品Repository 商品Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int? 受注ID { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? StartDate { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? EndDate { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Keyword { get; set; }

    private 受注Model 受注Model = new();

    private bool showDeleteConfirm = false;

    // DB検索した結果、存在しているなら編集モード
    private bool IsEdit => (受注Model?.受注ID ?? 0) > 0;

    // ==================================================
    // コンストラクタ
    // ==================================================
    protected override async Task OnInitializedAsync()
    {
        // ----- 修正時 -----
        if (受注ID.HasValue && 受注ID.Value > 0)
        {
            var item = await 受注Repository.GetByIdAsync(受注ID.Value);
            if (item != null)
            {
                受注Model = item;
            }
        }
        // ----- 登録時 -----
        if (受注Model.受注ID== 0 && (受注Model.明細一覧 == null || 受注Model.明細一覧.Count == 0))
        {
            受注Model.受注日 = DateTime.Today;

            // 明細を1行初期表示
            On明細追加();
        }

        // 得意先は最初に全件読み込み
        得意先全件 = await 得意先Repository.GetAllAsync();

        再計算合計金額();
    }

    // ==================================================
    // 得意先の入力
    // --------------------------------------------------
    // ・得意先は対象データが少ない場合の事例
    // ・頻繁にDBアクセスさせない。最初に全件読み込みレスポンスに全件含める。
    // ・条件指定でレスポンス済みのデータから絞り込み
    // ==================================================
    private List<得意先Model> 得意先全件 = new();

    // サジェスト取得ロジック
    private Task<List<SuggestTextBox.SuggestModel>> Fetch得意先サジェスト(string keyword)
    {
        // DBアクセスしない
        // 全件読み込んだ結果を絞り込むだけ
        var list = 得意先全件
            .Where(c => c.得意先名.Contains(keyword))
            .OrderBy(c => c.得意先名)
            .Take(10)
            .Select(c => new SuggestTextBox.SuggestModel
            {
                Code = c.得意先ID.ToString(),
                Name = c.得意先名,
                DspOnList = c.得意先名,
                AddInfo = c
            })
            .ToList();

        return Task.FromResult(list);
    }

    // 得意先サジェスト選択
    private void On得意先Select(SuggestTextBox.SuggestModel? item)
    {
        if (item is null)
        {
            受注Model.得意先ID = 0;
            受注Model.得意先名 = "";
            return;
        }
        var p = item.AddInfo as 得意先Model;
        if (p is null) return;
        受注Model.得意先ID = p.得意先ID;
        受注Model.得意先名 = p.得意先名;
    }

    // ==================================================
    // 商品コードの入力
    // --------------------------------------------------
    // ・商品は対象データが多い場合の事例
    // ・最初に全件読み込むにはデータが多すぎる
    // ・条件指定後に効率的に必要な対象データのみを取りに行く。
    // （SignalR通信が発生する）
    // ==================================================
    private async Task<List<SuggestTextBox.SuggestModel>> Fetch商品サジェスト(string keyword)
    {
        var list = await 商品Repository.SearchAsync(keyword);
        return list.Select(p => new SuggestTextBox.SuggestModel
        {
            Code = p.商品コード,
            Name = p.商品名,
            DspOnList = p.商品コード + " " + p.商品名, // 両方表示
            AddInfo = p
        }).ToList();
    }

    private void On商品Select(SuggestTextBox.SuggestModel? item, 受注明細Model 明細)
    {
        明細.商品コード = "";
        明細.商品名 = "";
        明細.単価 = 0;

        if (item is null)
        {
            return;
        }
        else
        {
            var p = item.AddInfo as 商品Model;
            if (p is null) return;

            明細.商品コード = p.商品コード;
            明細.商品名 = p?.商品名 ?? "";
            明細.単価 = p?.単価 ?? 0;
        }
        再計算合計金額();
    }

    // ==================================================
    // 金額の再計算関連
    // ==================================================
    private void On数量変更(受注明細Model m, object? value)
    {
        if (value is int intValue)
            m.数量 = intValue;
        else if (value is null)
            m.数量 = 0; // or nullでもOK
        else
            m.数量 = Convert.ToInt32(value);

        再計算合計金額();
    }

    private void 再計算合計金額()
    {
        if (受注Model == null || 受注Model.明細一覧 == null) return;
        受注Model.合計金額 = 受注Model.明細一覧.Sum(x => x.単価 * x.数量);
    }

    // ==================================================
    // 明細の追加／削除
    // ==================================================
    private void On明細追加()
    {
        if (受注Model?.明細一覧 == null) return;
        if (受注Model.明細一覧.Count < 10)
        {
            受注Model.明細一覧.Add(new 受注明細Model());
            StateHasChanged();
        }
    }

    private void On明細削除(受注明細Model m)
    {
        if (受注Model?.明細一覧 == null) return;
        受注Model.明細一覧.Remove(m);
        再計算合計金額();
    }

    private void ShowDeleteConfirm() => showDeleteConfirm = true;
    private void HideDeleteConfirm() => showDeleteConfirm = false;

    // ==================================================
    // データの登録・修正・削除
    // ==================================================
    private async Task OnValidSubmit()
    {
        if (IsEdit)
            await 受注Repository.UpdateAsync(受注Model);
        else
            await 受注Repository.AddAsync(受注Model);

        NavToIndex();
    }

    private async Task OnDelete()
    {
        if (受注Model == null) return;
        await 受注Repository.DeleteAsync(受注Model.受注ID);
        NavToIndex();
    }

    private void OnCancel()
    {
        NavToIndex();
    }

    private void NavToIndex()
    {
        var url = $"orders/?StartDate={Uri.EscapeDataString(StartDate ?? "")}&EndDate={Uri.EscapeDataString(EndDate ?? "")}&Keyword={Uri.EscapeDataString(Keyword ?? "")}";
        Navigation.NavigateTo(url);
    }
}
