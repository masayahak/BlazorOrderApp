@page "/orders"
@using BlazorOrderApp.Models
@using BlazorOrderApp.Repositories
@attribute [Authorize]
@inherits BlazorOrderApp.Components.Commons.InitialFocusComponent

<h2 class="mb-3">受注一覧</h2>

@* ------------ 絞り込み条件 ------------ *@
<div class="row g-2 mb-4">
    <div class="d-flex align-items-end mb-3">
        <div class="me-3" style="width: 150px;">
            <label for="start-date" class="form-label">受注期間</label>
            <InputText id="start-date" @bind-Value="StartDate" class="form-control" placeholder="yyyy/MM/dd" autocomplete="off"
                       data-tab="10" />
        </div>
        <div class="me-3 align-self-end">～</div>
        <div class="me-4" style="width: 150px;">
            <label for="end-date" class="form-label invisible">終了日</label>
            <InputText id="end-date" @bind-Value="EndDate" class="form-control" placeholder="yyyy/MM/dd" autocomplete="off"
                       data-tab="20" />
        </div>
        <div style="width: 300px;">
            <label for="keyword" class="form-label">得意先名・商品名</label>
            <InputText id="keyword" @bind-Value="Keyword" class="form-control" autocomplete="off"
                       data-tab="30" />
        </div>
        <button class="btn btn-primary ms-3" @onclick="OnSearchAsync">検索</button>
        <button class="btn btn-danger ms-3" @onclick="ThrowTestException">例外テスト</button>
        <button class="btn btn-success ms-auto" @onclick="OnAdd">＋追加</button>
    </div>
</div>

@* ------------ 一覧表示部 ------------ *@
<table class="table table-striped table-bordered table-sm">
    <thead class="custom-header">
        <tr>
            <th class="text-center" style="width:10%">受注ID</th>
            <th class="text-center" style="width:15%">受注日</th>
            <th class="text-center">得意先名</th>
            <th class="text-center" style="width:15%">合計金額</th>
            <th class="text-center" style="width:15%">操作</th>
        </tr>
    </thead>
    <tbody>
        @if (!表示一覧.Any())
        {
            <tr><td colspan="5">該当する受注がありません。</td></tr>
        }
        else
        {
            <Virtualize Context="row" Items="@表示一覧" OverscanCount="5" SpacerElement="tr">
                <tr>
                    <td class="text-end pe-3">@row.受注ID</td>
                    <td class="text-center">@row.受注日.ToString("yyyy/MM/dd (ddd)", new System.Globalization.CultureInfo("ja-JP"))</td>
                    <td>@row.得意先名</td>
                    <td class="text-end pe-3">￥@row.合計金額.ToString("N0")</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-primary me-2"
                                @onclick="@(() => OnEdit(row.受注ID))">
                            確認・修正
                        </button>
                    </td>
                </tr>
            </Virtualize>
        }
    </tbody>
</table>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] public IOrderRepository 受注Repository { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string StartDate { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string EndDate { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string Keyword { get; set; } = string.Empty;

    private List<OrderModel> 表示一覧 = new();  // 絞り込みでフィルターされる

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StartDate))
        {
            // JSTで本日を取得
            var jst = TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time");
            StartDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, jst)
                                    .Date.ToString("yyyy/MM/dd");

            // デモ用に開始日を固定
            StartDate = (new DateTime(2025, 8, 1)).ToString("yyyy/MM/dd");
        }
        // 初期表示
        await OnSearchAsync();
    }

    private async Task OnSearchAsync()
    {
        var safeMinDate = new DateTime(1900, 1, 1);
        var safeMaxDate = new DateTime(2999, 12, 31);

        DateTime.TryParse(StartDate, out DateTime stDate);
        if (stDate == DateTime.MinValue) stDate = safeMinDate; 
        DateTime.TryParse(EndDate, out DateTime edDate);
        if (edDate == DateTime.MinValue) edDate = safeMaxDate;
        var k = (Keyword ?? "").Trim();

        表示一覧 = (await 受注Repository.SearchAsync(stDate, edDate, k)).ToList();

    }

    private void OnAdd()
    {
        var url = $"orders/edit/?StartDate={Uri.EscapeDataString(StartDate ?? "")}&EndDate={Uri.EscapeDataString(EndDate ?? "")}&Keyword={Uri.EscapeDataString(Keyword ?? "")}";
        Navigation.NavigateTo(url);
    }
    private void OnEdit(int 受注ID)
    {
        var url = $"orders/edit/{受注ID}?StartDate={Uri.EscapeDataString(StartDate ?? "")}&EndDate={Uri.EscapeDataString(EndDate ?? "")}&Keyword={Uri.EscapeDataString(Keyword ?? "")}";
        Navigation.NavigateTo(url);
    }

    private void ThrowTestException()
    {
        throw new Exception("テスト例外: これは意図的なエラーです");
    }
}

