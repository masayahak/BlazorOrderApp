@using Microsoft.AspNetCore.Components.Web

<div class="position-relative w-100">
    <InputText @bind-Value="_input"
               class="@InputClass"
               placeholder="@Placeholder"
               @oninput="OnInput"
               autocomplete="off" />
    <div class="list-group position-absolute w-100" style="z-index:10;"
         hidden="@(SuggestList.Count == 0)">
        @foreach (var item in SuggestList)
        {
            <button type="button" class="list-group-item list-group-item-action"
                    @onclick="() => On候補選択(item)">
                @item.DspOnList
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string InputClass { get; set; } = "form-control";
    [Parameter] public Func<string, Task<List<SuggestModel>>>? FetchSuggestions { get; set; }
    [Parameter] public int StartSearchChars { get; set; } = 2;
    [Parameter] public EventCallback<SuggestModel> OnSelect { get; set; }
    [Parameter] public Func<SuggestModel, string>? DisplayValueSelector { get; set; }

    private string _input = "";
    private List<SuggestModel> SuggestList { get; set; } = new();

    private CancellationTokenSource? debounceCts;

    protected override void OnParametersSet()
    {
        // 親から初期値だけ反映（手動変更時のみ）
        if (string.IsNullOrEmpty(_input) && !string.IsNullOrEmpty(Value))
            _input = Value;
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        _input = e.Value?.ToString() ?? "";

        if (_input.Length < StartSearchChars)
        {
            SuggestList.Clear();
            StateHasChanged();
            return;
        }

        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;

        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested && FetchSuggestions != null)
            {
                var result = await FetchSuggestions(_input);
                SuggestList = result;
                StateHasChanged();
            }
            else
            {
                SuggestList.Clear();
                StateHasChanged();
            }
        }
        catch (TaskCanceledException)
        {
            // 無視
        }
    }

    private async void On候補選択(SuggestModel item)
    {
        if (DisplayValueSelector != null)
            _input = DisplayValueSelector(item);
        else
            _input = item.Name; // デフォルト
        SuggestList.Clear();
        StateHasChanged();
        await OnSelect.InvokeAsync(item);
    }

    public class SuggestModel
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public string DspOnList { get; set; } = "";
        public object? AddInfo { get; set; }
    }
}
